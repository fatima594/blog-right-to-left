<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | محرك الجلسة الافتراضي
    |--------------------------------------------------------------------------
    |
    | هذا الخيار يحدد محرك الجلسة الافتراضي الذي يتم استخدامه لطلبات
    | الدخول. تدعم Laravel مجموعة متنوعة من خيارات التخزين للاحتفاظ
    | ببيانات الجلسة. التخزين في قاعدة البيانات هو خيار افتراضي جيد.
    |
    | المدعوم: "file", "cookie", "database", "apc",
    |          "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | مدة الجلسة
    |--------------------------------------------------------------------------
    |
    | هنا يمكنك تحديد عدد الدقائق التي ترغب في أن تظل فيها الجلسة
    | idle قبل أن تنتهي. إذا كنت تريد أن تنتهي على الفور عند غلق
    | المتصفح، يمكنك تحديد ذلك عبر خيار expire_on_close.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | تشفير الجلسة
    |--------------------------------------------------------------------------
    |
    | يتيح لك هذا الخيار بسهولة تحديد أن جميع بيانات الجلسة يجب أن
    | تكون مشفرة قبل تخزينها. يتم تنفيذ جميع عمليات التشفير تلقائيًا
    | بواسطة Laravel ويمكنك استخدام الجلسة كالمعتاد.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | موقع ملفات الجلسة
    |--------------------------------------------------------------------------
    |
    | عند استخدام محرك الجلسة "file"، يتم وضع ملفات الجلسة على القرص.
    | يتم تحديد موقع التخزين الافتراضي هنا؛ ومع ذلك، يمكنك توفير موقع
    | آخر حيث يجب تخزينها.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | اتصال قاعدة بيانات الجلسة
    |--------------------------------------------------------------------------
    |
    | عند استخدام محرك الجلسة "database" أو "redis"، يمكنك تحديد اتصال
    | يجب استخدامه لإدارة هذه الجلسات. يجب أن يتوافق ذلك مع اتصال في
    | خيارات تكوين قاعدة البيانات لديك.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | جدول قاعدة بيانات الجلسة
    |--------------------------------------------------------------------------
    |
    | عند استخدام محرك الجلسة "database"، يمكنك تحديد الجدول المستخدم
    | لتخزين الجلسات. بالطبع، يتم تحديد افتراضي معقول لك، ولكن يمكنك
    | تغييره إلى جدول آخر.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | تخزين ذاكرة الجلسة
    |--------------------------------------------------------------------------
    |
    | عند استخدام أحد محركات الجلسة المدفوعة التي تعتمد على التخزين
    | المؤقت، يمكنك تحديد مخزن التخزين الذي يجب استخدامه لتخزين بيانات
    | الجلسة بين الطلبات. يجب أن يتطابق مع أحد مخازن التخزين المحددة لديك.
    |
    | يؤثر على: "apc"، "dynamodb"، "memcached"، "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | يانصيب تنظيف الجلسة
    |--------------------------------------------------------------------------
    |
    | يجب على بعض محركات الجلسة تنظيف موقع التخزين الخاص بها يدويًا
    | للتخلص من الجلسات القديمة من التخزين. هنا الاحتمالات التي ستحدث
    | فيها على طلب معين. بشكل افتراضي، تكون الفرص 2 من 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | اسم ملف تعريف الارتباط للجلسة
    |--------------------------------------------------------------------------
    |
    | هنا يمكنك تغيير اسم ملف تعريف الارتباط للجلسة الذي ينشئه
    | الإطار. عادةً، لا تحتاج إلى تغيير هذه القيمة لأن القيام بذلك
    | لا يمنح تحسين أمان ذو مغزى.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | مسار ملف تعريف الارتباط للجلسة
    |--------------------------------------------------------------------------
    |
    | يحدد مسار ملف تعريف الارتباط للجلسة المسار الذي سيتم اعتباره
    | متاحًا له. عادةً ما سيكون هذا هو المسار الجذري لتطبيقك، ولكن يمكنك
    | تغييره عند الحاجة.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | نطاق ملف تعريف الارتباط للجلسة
    |--------------------------------------------------------------------------
    |
    | تحدد هذه القيمة النطاق والمجالات الفرعية التي يتوفر لها ملف
    | تعريف الارتباط للجلسة. بشكل افتراضي، سيكون ملف تعريف الارتباط
    | متاحًا للنطاق الجذري وجميع المجالات الفرعية. عادةً، لا ينبغي
    | تغيير ذلك.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | ملفات تعريف الارتباط الآمنة
    |--------------------------------------------------------------------------
    |
    | من خلال تعيين هذا الخيار إلى true، سيتم إرسال ملفات تعريف الارتباط
    | للجلسة إلى الخادم فقط إذا كان المتصفح لديه اتصال HTTPS. هذا سيمنع
    | إرسال ملف تعريف الارتباط إليك عندما لا يمكن القيام بذلك بأمان.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | الوصول عبر HTTP فقط
    |--------------------------------------------------------------------------
    |
    | تعيين هذه القيمة إلى true سيمنع JavaScript من الوصول إلى قيمة
    | ملف تعريف الارتباط وسيكون ملف تعريف الارتباط متاحًا فقط عبر
    | بروتوكول HTTP. من غير المرجح أن يجب عليك تعطيل هذا الخيار.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | ملفات تعريف الارتباط بنفس الموقع
    |--------------------------------------------------------------------------
    |
    | يحدد هذا الخيار كيفية تصرف ملفات تعريف الارتباط الخاصة بك عند
    | حدوث طلبات عبر المواقع، ويمكن استخدامه للتخفيف من هجمات CSRF.
    | بشكل افتراضي، سنقوم بتعيين هذه القيمة إلى "lax" للسماح بطلبات
    | عبر المواقع بأمان.
    |
    | انظر: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | المدعوم: "lax"، "strict"، "none"، null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | ملفات تعريف الارتباط المقسمة
    |--------------------------------------------------------------------------
    |
    | تعيين هذه القيمة إلى true سيربط ملف تعريف الارتباط بالموقع الأعلى
    | في سياق عبر المواقع. تقبل المتصفحات ملفات تعريف الارتباط المقسمة
    | عندما تكون معلمة "secure" مضبوطة وملف تعريف الارتباط بنفس الموقع
    | مضبوط على "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
